// Generated by LiveScript 1.5.0
(function(){
  var bitcoin, bip32utils, bip39, fs, p, Message, bitcore, superagent, wallet, generateKeys, network, guid, request, simple, status, start, stop, create, operation, getContainer, toString$ = {}.toString, out$ = typeof exports != 'undefined' && exports || this;
  bitcoin = require('bitcoinjs-lib');
  bip32utils = require('bip32-utils');
  bip39 = require('bip39');
  fs = require('fs');
  p = require('prelude-ls');
  Message = require('bitcore-message');
  bitcore = require('bitcore-lib');
  superagent = require('superagent');
  wallet = require('./wallet.js');
  generateKeys = wallet.generateKeys;
  network = bitcoin.networks.bitcoin;
  guid = function(){
    var s4;
    s4 = function(){
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
  };
  request = function(config, path, body, cb){
    var parts, type, mnemonic, name, node, urlPart, ck, url, requestid, message, privateKey2, signature, req;
    parts = path.match(/^(A-Z+) (.+)$/);
    type = parts[1].toLowerCase();
    mnemonic = config.mnemonic, name = config.name, node = config.node;
    urlPart = parts[2].replace(/:name/, name);
    ck = generateKeys(message);
    url = node + "" + urlPart;
    requestid = guid();
    message = p.join(';')(
    p.map(JSON.stringify)(
    [name, body, requestid]));
    privateKey2 = bitcore.PrivateKey.fromWIF(ck.privateKey);
    signature = Message(message).sign(privateKey2);
    req = superagent[type](url);
    return req.send(body).set('requestid', requestid).set('address', ck.address).set('signature', signature).end(cb);
  };
  simple = curry$(function(path, config, cb){
    return request(config, path, {}, function(err, data){
      cb(err, data.text);
    });
  });
  status = simple("GET /container/status/:name");
  start = simple("POST /container/start/:name");
  stop = simple("POST /container/stop/:name");
  create = curry$(function(config, data, cb){
    if (toString$.call(data).slice(8, -1) !== 'Object') {
      return cb("Data Must be Object");
    }
    if (toString$.call(data.code).slice(8, -1) !== 'String') {
      return cb("'code' is required field");
    }
    return request(config, "POST /container/create/:name", data, function(err, data){
      cb(err, data.text);
    });
  });
  operation = curry$(function(config, operation, data, cb){
    if (toString$.call(data).slice(8, -1) !== 'Object') {
      return cb("Data Must be Object");
    }
    return request(config, "POST /container/:name/" + operation, data, function(err, data){
      cb(err, data.text);
    });
  });
  out$.getContainer = getContainer = function(config){
    return {
      status: status(config),
      create: create(config),
      start: start(config),
      stop: stop(config),
      operation: operation(config)
    };
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
